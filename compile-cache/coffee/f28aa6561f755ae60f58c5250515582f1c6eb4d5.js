
/* IMPORTS */

(function() {
  var ClockView, StatusView, Timer, fs, mkdirp, moment, path, twix;

  fs = null;

  path = require("path");

  moment = null;

  twix = null;

  mkdirp = null;

  ClockView = null;

  StatusView = null;


  /* EXPORTS */

  module.exports = Timer = (function() {

    /* ATTRIBUTES */
    Timer.prototype.storagePath = null;

    Timer.prototype.projectTimekeeperPath = null;

    Timer.prototype.currentProject = null;

    Timer.prototype.clockView = null;

    Timer.prototype.statusView = null;

    Timer.prototype.isActive = false;


    /* CONSTRUCTOR */

    function Timer(state, timeDataPath) {
      this.currentProject = atom.project.getPath();
      this.storagePath = timeDataPath || null;
      this.setStoragePath();
      if (state) {
        if (state.timerObject && state.timerObject.start) {
          this.save(state.timerObject);
        }
      }
      if (this.currentProject) {
        this.setProjectTimekeeperPath();
        this.startTimestamp = null;
        this.pauseTimestamp = null;
        this.endTimestamp = null;
        this.autoPauseStartTimestamp = null;
        this.autoPauseEndTimestamp = null;
        this.clock = 0;
        this["break"] = 0;
        this.pauses = [];
        this.autoPauses = [];
        this.autoEnable = atom.config.get("timekeeper.autoEnableTimeTrackingOnLoad");
      } else {
        throw {
          stack: "- Timekeeper is active & functional only with a valid project open"
        };
      }
    }


    /* ACTIONS */


    /* AUTO-START */

    Timer.prototype.autostart = function() {
      if (this.autoEnable === true) {
        return this.start();
      }
    };


    /* START */

    Timer.prototype.start = function() {
      if (this.pauseTimestamp === null) {
        if (this.startTimestamp === null) {
          this.startTimestamp = Date.now();
          this.incrementer = setInterval(((function(_this) {
            return function() {
              return _this.step();
            };
          })(this)), 1000);
          this.statusView.update("Started time tracking ...");
        } else {
          this.statusView.update("Already tracking time ...");
        }
      } else {
        this.statusView.update("Continuing time tracking ...");
        this.pauses.push({
          start: this.pauseTimestamp,
          duration: this["break"]
        });
        this.pauseTimestamp = null;
        this["break"] = 0;
        this.clockView.removeClass("paused");
      }
      this.clockView.update(this.format());
      this.statusClearer = setInterval(((function(_this) {
        return function() {
          return _this.clearStatus();
        };
      })(this)), 3000);
      return this.isActive = true;
    };


    /* AUTO-PAUSE */

    Timer.prototype.autopause = function() {
      if (this.isActive === true) {
        if (this.autoPauseStartTimestamp !== null) {
          this.autoPauseEndTimestamp = Date.now();
          this.autoPauses.push({
            start: this.autoPauseStartTimestamp,
            end: this.autoPauseEndTimestamp
          });
          this.autoPauseStartTimestamp = null;
          return this.autoPauseEndTimestamp = null;
        } else {
          return this.autoPauseStartTimestamp = Date.now();
        }
      }
    };


    /* PAUSE */

    Timer.prototype.pause = function() {
      if (this.pauseTimestamp !== null) {
        return this.start();
      } else {
        this.pauseTimestamp = Date.now();
        this.statusView.update("Time tracking paused!");
        return this.clockView.addClass("paused");
      }
    };


    /* FINISH */

    Timer.prototype.finish = function() {
      this.endTimestamp = Date.now();
      clearTimeout(this.incrementer);
      if (this.pauseTimestamp !== null) {
        this.pauses.push({
          start: this.pauseTimestamp,
          duration: this["break"]
        });
        this.clockView.removeClass("paused");
      }
      this.save();
      this.statusView.update("Saved timekeeper data!");
      this.statusClearer = setInterval(((function(_this) {
        return function() {
          return _this.clearStatus();
        };
      })(this)), 3000);
      this.resetClocks();
      this.clockView.update(this.format());
      return this.isActive = false;
    };


    /* RESET */

    Timer.prototype.reset = function() {
      clearTimeout(this.incrementer);
      if (this.pauseTimestamp !== null) {
        this.clockView.removeClass("paused");
      }
      this.resetClocks();
      return this.start();
    };


    /* ABORT */

    Timer.prototype.abort = function() {
      clearTimeout(this.incrementer);
      if (this.pauseTimestamp !== null) {
        this.clockView.removeClass("paused");
      }
      this.resetClocks();
      this.clockView.update(this.format());
      this.statusView.update("Discarded current timekeeper data!");
      this.statusClearer = setInterval(((function(_this) {
        return function() {
          return _this.clearStatus();
        };
      })(this)), 3000);
      return this.isActive = false;
    };


    /* INTERNAL ACTIONS */


    /* STEP */

    Timer.prototype.step = function() {
      if (this.pauseTimestamp === null) {
        this.clock = this.clock + 1;
        return this.clockView.update(this.format());
      } else {
        return this["break"] = this["break"] + 1;
      }
    };


    /* RESET CLOCKS */

    Timer.prototype.resetClocks = function() {
      this.startTimestamp = null;
      this.pauseTimestamp = null;
      this.endTimestamp = null;
      this.autoPauseStartTimestamp = null;
      this.autoPauseEndTimestamp = null;
      this.clock = 0;
      this["break"] = 0;
      this.pauses = [];
      return this.autoPauses = [];
    };


    /* PERSIST */


    /* SAVE */

    Timer.prototype.save = function(timerObject) {

      /* REQUIRE */
      var autoPausesValue, clockValue, dataToSave, endValue, existingContent, finalDataToSave, pausesValue, saveFileDirectoryExists, saveFileDirectoryPath, saveFileExists, saveFilePath, saveFilePaths, startValue, timerProject, updatedContent, _i, _len, _results;
      if (fs == null) {
        fs = require("fs");
      }
      if (mkdirp == null) {
        mkdirp = require("mkdirp");
      }
      if (timerObject) {
        timerProject = timerObject.project;
        startValue = timerObject.start;
        endValue = timerObject.end;
        clockValue = timerObject.duration;
        pausesValue = timerObject.pauses;
        autoPausesValue = timerObject.autoPauses;
      } else {
        timerProject = this.currentProject;
        startValue = this.startTimestamp;
        endValue = this.endTimestamp;
        clockValue = this.clock;
        pausesValue = this.pauses;
        autoPausesValue = this.autoPauses;
      }
      dataToSave = {
        "start": startValue,
        "end": endValue,
        "duration": clockValue,
        "pauses": pausesValue,
        "autoPauses": autoPausesValue
      };
      saveFilePaths = this.getPath(timerProject, startValue, endValue, clockValue, pausesValue);
      if (saveFilePaths.length > 0) {
        _results = [];
        for (_i = 0, _len = saveFilePaths.length; _i < _len; _i++) {
          saveFilePath = saveFilePaths[_i];
          saveFileExists = fs.existsSync(saveFilePath);
          if (saveFileExists) {
            existingContent = fs.readFileSync(saveFilePath, {
              encoding: "utf8"
            });
            finalDataToSave = JSON.parse(existingContent);
          } else {
            saveFileDirectoryPath = path.dirname(saveFilePath);
            saveFileDirectoryExists = fs.existsSync(saveFileDirectoryPath);
            if (!saveFileDirectoryExists) {
              mkdirp.sync(saveFileDirectoryPath);
            }
            finalDataToSave = [];
          }
          finalDataToSave.push(dataToSave);
          updatedContent = JSON.stringify(finalDataToSave, null, 4);
          _results.push(fs.writeFileSync(saveFilePath, updatedContent, {
            encoding: "utf8"
          }));
        }
        return _results;
      }
    };


    /* PATHS */


    /* GET PATH */

    Timer.prototype.getPath = function(project, start, end, duration, pauses) {

      /* REQUIRE */
      var dataFilePaths, dateFilePath, dateInRange, dateRange, dateRangeIterator, endDateObject, pause, startDateObject, _i, _len;
      if (moment == null) {
        moment = require("moment");
      }
      if (twix == null) {
        twix = require("twix");
      }
      dataFilePaths = [];
      if (end === null) {
        end = start + (duration * 1000);
        if (pauses.length > 0) {
          for (_i = 0, _len = pauses.length; _i < _len; _i++) {
            pause = pauses[_i];
            end = end + (pause.duration * 1000);
          }
        }
      }
      startDateObject = moment(start);
      endDateObject = moment(end);
      dateRange = startDateObject.twix(endDateObject, {
        allDay: true
      });
      dateRangeIterator = dateRange.iterate("days");
      if (dateRange.count("days") <= 1) {
        dateFilePath = path.join(this.getStoragePath(), new Buffer(project, "utf8").toString("base64"), endDateObject.year().toString(), (endDateObject.month() + 1).toString(), endDateObject.date().toString() + ".json");
        dataFilePaths.push(dateFilePath);
      } else {
        while (dateRangeIterator.hasNext()) {
          dateInRange = dateRangeIterator.next();
          dateFilePath = path.join(this.getStoragePath(), new Buffer(project, "utf8").toString("base64"), dateInRange.year().toString(), (dateInRange.month() + 1).toString(), dateInRange.date().toString() + ".json");
          dataFilePaths.push(dateFilePath);
        }
      }
      return dataFilePaths;
    };


    /* SET PATH */


    /* GET PROJECT TIMEKEEPER PATH */

    Timer.prototype.getProjectTimekeeperPath = function() {
      return this.projectTimekeeperPath;
    };


    /* SET PROJECT TIMEKEEPER PATH */

    Timer.prototype.setProjectTimekeeperPath = function() {
      return this.projectTimekeeperPath = path.join(this.getStoragePath(), new Buffer(this.currentProject, "utf8").toString("base64"));
    };


    /* GET STORAGE PATH */

    Timer.prototype.getStoragePath = function() {
      return this.storagePath;
    };


    /* SET STORAGE PATH */

    Timer.prototype.setStoragePath = function() {
      if (!this.storagePath) {
        return this.storagePath = "" + (atom.getConfigDirPath()) + "/.timekeeper";
      }
    };


    /* FORMATTING */


    /* FORMAT */

    Timer.prototype.format = function() {
      var clockValue, formattedValue, hours, minutes, seconds;
      if (this.clock <= 59) {
        formattedValue = "00:00:" + (this.zeropad(this.clock));
      } else {
        clockValue = this.clock;
        seconds = Math.floor(clockValue % 60);
        clockValue = clockValue / 60;
        minutes = Math.floor(clockValue % 60);
        clockValue = clockValue / 60;
        hours = Math.floor(clockValue % 24);
        formattedValue = "" + (this.zeropad(hours)) + ":" + (this.zeropad(minutes)) + ":" + (this.zeropad(seconds));
      }
      return formattedValue;
    };


    /* ZEROPAD */

    Timer.prototype.zeropad = function(value) {
      var paddedValue;
      paddedValue = ("0" + value).slice(-2);
      return paddedValue;
    };


    /* VIEWS */


    /* STATUS BAR VIEWS */

    Timer.prototype.renderStatusBarViews = function() {

      /* REQUIRE */
      if (ClockView == null) {
        ClockView = require("./views/clock.coffee");
      }
      if (StatusView == null) {
        StatusView = require("./views/status.coffee");
      }
      if (this.clockView == null) {
        this.clockView = new ClockView();
      }
      if (this.statusView == null) {
        this.statusView = new StatusView();
      }
      this.clockView.attach();
      return this.statusView.attach();
    };


    /* CLEAR STATUS */

    Timer.prototype.clearStatus = function() {
      clearTimeout(this.statusClearer);
      if (this.pauseTimestamp === null) {
        return this.statusView.clear();
      }
    };

    return Timer;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Users/josemoreira/.atom/packages/timekeeper/lib/timer.coffee